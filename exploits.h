		if (Settings::Menu::AimWhileJumping) { //Allows you to ADS when You are in the Air
			driver.write<bool>(LocalPawn + 0x4a05, true); //bADSWhileNotOnGround
		}
		else {
			driver.write<bool>(LocalPawn + 0x4a05, false); //bADSWhileNotOnGround
		}

		if (Settings::Menu::AirStuck) {  //Freezes You in the Air
			if (GetAsyncKeyState(VK_MENU), Controller::IsPressingLeftTrigger()) { //Alt Keybind
				driver.write<float>(LocalPawn + 0x64, 0); //CustomTimeDilation
			}
			else {
				driver.write<float>(LocalPawn + 0x64, 1); //CustomTimeDilation
			}
		}

		if (Settings::Menu::InstaRes) { //Revives Teammates in 1 Second
			driver.write<float>(LocalPawn + OFFSETS::Revivefromdbnotime, .001); // RevDbNotTime
		}
		bool Bot = false;

		if (Settings::Menu::spinbot)
		{
			if (GetAsyncKeyState(VK_RBUTTON))
			{
				Settings::Menu::while_rotating = true;

				if (LocalPawn)
				{
					uint64_t MeshA = driver.read<uint64_t>(LocalPawn + OFFSETS::Mesh);
					Settings::Menu::increased_value = Settings::Menu::increased_value + 100;
					driver.write<Vector3>(MeshA + 0x140, Vector3(1, Settings::Menu::increased_value, 1));
				}
			}
			else if (!GetAsyncKeyState(VK_RBUTTON))
			{
				if (LocalPawn)
				{
					if (Settings::Menu::while_rotating)
					{
						uint64_t MeshA = driver.read<uint64_t>(LocalPawn + OFFSETS::Mesh);
						driver.write<Vector3>(MeshA + 0x140, Vector3(0, -90, 0));
						Settings::Menu::while_rotating = false;
					}
				}
			}
		}


		if (Settings::Menu::dpump)
		{
			uintptr_t CurrentWeapon = driver.read<uintptr_t>(LocalPawn + OFFSETS::CurrentWeapon);
			if (CurrentWeapon)
			{
				driver.write<bool>(CurrentWeapon + 0xfb1, true); //AFortWeapon    bIgnoreTryToFireSlotCooldownRestriction    0xf41    bool
			}
		}
		if (Settings::Menu::NoBloom)
		{
			if (GetAsyncKeyState(VK_LBUTTON) or Controller::IsPressingRightTrigger)
			{
				driver.write<float>(Crrneytwep + 0x64, 30);
			}
			else
			{
				driver.write<float>(Crrneytwep + 0x64, 1);
			}
		}

		if (Settings::Menu::noreload == true)
		{
			if (bIsReloadingWeapon == true)
			{
				driver.write(worldsettings + 0x390, 5.f);

			}
			else {
				driver.write(worldsettings + 0x390, 1.f);
			}
		}
		if (bullettp)
		{
			if (driver.read<DWORD_PTR>(CurrentActor + 0x6a0) && driver.read<DWORD_PTR>(driver.read<DWORD_PTR>(CurrentActor + 0x6a0) + 0x8)) //Bullet check reduce lag
			{

				std::string AllAct = GetNameFromFName(CurrentActorId);


				if (AllAct == "B_Prj_Bullet_Sniper_C" or AllAct == "B_Prj_Bullet_DMR_C" or AllAct == "B_Prj_Bullet_Sniper_Heavy_C" or AllAct == "B_Prj_Bullet_Cosmos_AR_C" /* or AllAct == "B_Shotgun_Standard_Athena_C" or AllAct == "Tracer_Shotgun_C"*/)
				{


					uint64_t currentactormeshsexy = driver.read<uint64_t>(closestPawnbullet + OFFSETS::Mesh);
					Vector3 Headpos = GetBoneWithRotation(currentactormeshsexy, 66);


					DWORD_PTR BulletRootComp = driver.read<DWORD_PTR>(CurrentActor + OFFSETS::RootComponet);
					driver.write<char>(BulletRootComp + OFFSETS::RootComponet, 0);
					driver.write<Vector3>(BulletRootComp + OFFSETS::RelativeLocation, Vector3{ Headpos.x, Headpos.y, Headpos.z });
				}
			}
		}


		if (Settings::Menu::instantactions)
		{
			auto Mesh = driver.read<uint64_t>(LocalPawn + OFFSETS::Mesh); // -> 0x2a8 = player pawn | 0x2a0 = mesh
			driver.write<float>(Mesh + 0x8b0, 99.f);
		}
		else
		{
			auto Mesh = driver.read<uint64_t>(LocalPawn + OFFSETS::Mesh); // -> 0x2a8 = player pawn | 0x2a0 = mesh
			driver.write<float>(Mesh + 0x8b0, 1.f);
		}

		if (Settings::Menu::instaReboot)
		{
			//AFortPlayerStateAthena    InteractingRebootVan    0x1680    ABuildingGameplayActorSpawnMachine*
			//ABuildingGameplayActorSpawnMachine    ResurrectionStartDelay    0x990    FScalableFloat

			float ResurrectionStartDelay = driver.read<float>(LocalPawn + 0x1680 + 0x990);
			if (ResurrectionStartDelay != 0.001f)
			{
				driver.write<float>(LocalPawn + 0x1680 + 0x990, 0.001f);
			}

		}
		if (Settings::Menu::carFly)
		{
			if (LocalPawn)
			{
				struct {
					FMinimalViewInfo Info;
					float ProjectionMatrix[4][4];
				} view = { 0 };
				uint64_t VEHICLE_STATS = driver.read<uint64_t>(LocalPawn + 0x2260); //AFortPlayerPawn    CurrentVehicle    0x21b8    AActor *
				if (GetAsyncKeyState(VK_SPACE))driver.write<char>(VEHICLE_STATS + 0x69a, 1);//AFortAthenaVehicle    bUseGravity : 1    	0x67a    char
			}
		}
		if (Settings::Menu::FovChanger)
		{
			uintptr_t PlayerCameraManager = driver.read<uintptr_t>(PlayerController + 0x328);
			driver.write<float>(PlayerCameraManager + 0x284 + 0x4, Settings::Menu::fovchangeramount);
		}
